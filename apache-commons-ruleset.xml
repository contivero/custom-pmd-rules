<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sourceforge.net/ruleset/2.0.0">

   <!-- StringUtils rules  -->
   <rule name="Prefer_StringUtils_isNotEmpty" language="java" message="Prefer StringUtils.isNotEmpty" class="net.sourceforge.pmd.lang.rule.XPathRule">
   <description>
      Instead of checking if a String is different from null and the empty string, use StringUtils.isNotEmpty
   </description>
   <priority>4</priority>
   <properties>
      <property name="version" value="2.0"/>
      <property name="xpath">
         <value>
<![CDATA[
(//ConditionalAndExpression[
EqualityExpression[@Image="!="][
  PrimaryExpression/PrimaryPrefix/Literal/NullLiteral
  and PrimaryExpression/PrimaryPrefix/Name
  ] and (UnaryExpressionNotPlusMinus[@Image="!"]/PrimaryExpression[
    (PrimaryPrefix/Literal[@Image='""']
    and PrimarySuffix[@Image="equals"]
    and PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name[@Image=../../../../../../../../../EqualityExpression/PrimaryExpression/PrimaryPrefix/Name/@Image]
    ) or (
      PrimaryPrefix/Name[@Image = concat(../../../../EqualityExpression[@Image="!="]/PrimaryExpression/PrimaryPrefix/Name/@Image, ".equals")]
      and PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal[@Image='""']
    )
  ] or EqualityExpression[@Image = "=="][
     PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral[@True = false()]
     and (
       PrimaryExpression[
         PrimaryPrefix/Literal[@Image='""']
         and PrimarySuffix[@Image="equals"]
         and PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name[@Image=../../../../../../../../../EqualityExpression/PrimaryExpression/PrimaryPrefix/Name/@Image]
       ]) or (
       PrimaryExpression/PrimaryPrefix/Name[@Image = concat(../../../../EqualityExpression[@Image="!="]/PrimaryExpression/PrimaryPrefix/Name/@Image , ".equals")]
     )
]
)
]

|

//UnaryExpressionNotPlusMinus[@Image="!"]/PrimaryExpression/PrimaryPrefix/Expression/ConditionalOrExpression[
 EqualityExpression[@Image="=="][PrimaryExpression/PrimaryPrefix/Literal/NullLiteral
  and PrimaryExpression/PrimaryPrefix/Name]
  and PrimaryExpression[
   PrimaryPrefix/Literal[@Image='""']
   and PrimarySuffix[@Image="equals"]
   and PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name[@Image=../../../../../../../../EqualityExpression/PrimaryExpression/PrimaryPrefix/Name/@Image]
  or (
   PrimaryPrefix/Name[@Image = concat(../../../EqualityExpression[@Image="=="]/PrimaryExpression/PrimaryPrefix/Name/@Image, ".equals")]
   and PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal[@Image='""']
  )
 ]
]

|

//EqualityExpression[@Image="=="][
 PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral[@True = false()]
 and PrimaryExpression/PrimaryPrefix/Expression/ConditionalOrExpression[
   EqualityExpression[@Image = "=="][
         PrimaryExpression/PrimaryPrefix/Literal/NullLiteral
     and PrimaryExpression/PrimaryPrefix/Name
   ] and (PrimaryExpression[
     PrimaryPrefix/Literal[@Image='""']
     and PrimarySuffix[@Image = "equals"]
     and PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name[@Image = ../../../../../../../../EqualityExpression/PrimaryExpression/PrimaryPrefix/Name/@Image]
   ] or (
       PrimaryExpression/PrimaryPrefix/Name[@Image = concat(../../../EqualityExpression/PrimaryExpression/PrimaryPrefix/Name/@Image, ".equals")]
       and PrimaryExpression/PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal[@Image='""']
    )
   )
 ]
]
)
]]>
         </value>
      </property>
   </properties>
</rule>

<rule name="Prefer_StringUtils.isEmpty"
      language="java"
      message="Use StringUtils.isEmpty()"
      class="net.sourceforge.pmd.lang.rule.XPathRule">
   <description>
      Instead of checking against null and the empty string explicitly, use StringUtils.isEmpty
   </description>
   <priority>4</priority>
   <properties>
      <property name="version" value="2.0"/>
      <property name="xpath">
         <value>
<![CDATA[
//ConditionalOrExpression[
  EqualityExpression[@Image="=="][
    PrimaryExpression/PrimaryPrefix/Name[pmd-java:typeIs("java.lang.String")]
    and PrimaryExpression/PrimaryPrefix/Literal/NullLiteral
  ] and (
      (PrimaryExpression[
      PrimaryPrefix/Literal[@Image='""']
      and PrimarySuffix[@Image="equals"]
      and PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name[@Image=../../../../../../../../EqualityExpression/PrimaryExpression/PrimaryPrefix/Name/@Image]
    ]) or (
      PrimaryExpression[
        PrimaryPrefix/Name[@Image=concat(../../../EqualityExpression/PrimaryExpression/PrimaryPrefix/Name/@Image, ".equals")]
        and PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal[@Image='""']
      ]
    )
  )
]
]]>
         </value>
      </property>
   </properties>
</rule>

<rule name="Prefer_StringUtils.isBlank"
      language="java"
      message="Use StringUtils.isBlank()"
      class="net.sourceforge.pmd.lang.rule.XPathRule">
   <description>
      StringUtils.isBlank is more efficient than using trim()
      to check if an string is blank.
   </description>
   <priority>4</priority>
   <properties>
      <property name="version" value="2.0"/>
      <property name="xpath">
         <value>
<![CDATA[
(//Expression[PrimaryExpression[(
  PrimaryPrefix[1]/Literal[@Image = '""']
  and PrimarySuffix[1][@Image = "equals"]
  and PrimarySuffix[2]/Arguments/ArgumentList/Expression/PrimaryExpression[
    PrimaryPrefix[1]/Name[ends-with(@Image, ".trim")]
    and PrimarySuffix[1]/Arguments
  ]) or PrimaryPrefix[
      Name[ends-with(@Image, ".trim")]
      and following-sibling::PrimarySuffix[1]/Arguments]
      and (PrimarySuffix[(
        @Image = "equals"
        and following-sibling::PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal[@Image = '""']
      ) or (
        @Image = "isEmpty"
        and following-sibling::PrimarySuffix/Arguments
      )]
    )
  ] or RelationalExpression[@Image = "<="][
    PrimaryExpression[1][
      PrimaryPrefix[1]/Name[ends-with(@Image, ".trim")]
      and PrimarySuffix[1]/Arguments
      and PrimarySuffix[2][@Image = "length"]
      and PrimarySuffix[3]/Arguments
    ] and PrimaryExpression[2]/PrimaryPrefix/Literal[@Image = "0"]
  ] or RelationalExpression[@Image = ">="][
    PrimaryExpression[1]/PrimaryPrefix/Literal[@Image = "0"]
    and PrimaryExpression[2][
      PrimaryPrefix[1]/Name[ends-with(@Image, ".trim")]
      and PrimarySuffix[1]/Arguments
      and PrimarySuffix[2][@Image = "length"]
      and PrimarySuffix[3]/Arguments
    ]
  ] or EqualityExpression[@Image = "=="][
    PrimaryExpression/PrimaryPrefix/Literal[@Image = "0"]
    and PrimaryExpression[
      PrimaryPrefix/Name[ends-with(@Image, ".trim")]
      and PrimarySuffix[1]/Arguments
      and PrimarySuffix[2][@Image = "length"]
      and PrimarySuffix[3]/Arguments
    ]
  ]
]
|
//ConditionalOrExpression[
  EqualityExpression[@Image = "=="][
    PrimaryExpression/PrimaryPrefix/Name
    and PrimaryExpression/PrimaryPrefix/Literal/NullLiteral
  ] and (
PrimaryExpression[(
  PrimaryPrefix[1]/Literal[@Image = '""']
  and PrimarySuffix[1][@Image = "equals"]
  and PrimarySuffix[2]/Arguments/ArgumentList/Expression/PrimaryExpression[
    PrimaryPrefix[1]/Name[ends-with(@Image, ".trim")]
    and PrimarySuffix[1]/Arguments
  ]) or PrimaryPrefix[Name[ends-with(@Image, ".trim")] and following-sibling::PrimarySuffix[1]/Arguments] and (
      PrimarySuffix[
        @Image = "equals"
        and following-sibling::PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Literal[@Image = '""']
      ]
    ) or (
      PrimarySuffix[
        @Image = "isEmpty"
        and following-sibling::PrimarySuffix/Arguments
      ]
    )
  ] or RelationalExpression[@Image = "<="][
    PrimaryExpression[1][
      PrimaryPrefix[1]/Name[ends-with(@Image, ".trim")]
      and PrimarySuffix[1]/Arguments
      and PrimarySuffix[2][@Image = "length"]
      and PrimarySuffix[3]/Arguments
    ] and PrimaryExpression[2]/PrimaryPrefix/Literal[@Image = "0"]
  ] or RelationalExpression[@Image = ">="][
    PrimaryExpression[1]/PrimaryPrefix/Literal[@Image = "0"]
    and PrimaryExpression[2][
      PrimaryPrefix[1]/Name[ends-with(@Image, ".trim")]
      and PrimarySuffix[1]/Arguments
      and PrimarySuffix[2][@Image = "length"]
      and PrimarySuffix[3]/Arguments
    ]
  ] or EqualityExpression[@Image = "=="][
    PrimaryExpression/PrimaryPrefix/Literal[@Image = "0"]
    and PrimaryExpression[
      PrimaryPrefix/Name[ends-with(@Image, ".trim")]
      and PrimarySuffix[1]/Arguments
      and PrimarySuffix[2][@Image = "length"]
      and PrimarySuffix[3]/Arguments
    ]
  ]
)
]
)
]]>
         </value>
      </property>
   </properties>
</rule>

   <!-- CollectionUtils rules  -->
<rule name="Prefer_CollectionUtils.isEmpty"
      language="java"
      message="Use org.apache.commons.collections.CollectionUtils.isEmpty()"
      class="net.sourceforge.pmd.lang.rule.XPathRule">
   <description>
      Instead of checking against null and if the collection is empty explicitly, use CollectionUtils.isEmpty
   </description>
   <priority>5</priority>
   <properties>
      <property name="version" value="2.0"/>
      <property name="xpath">
         <value>
<![CDATA[
//ConditionalOrExpression[
  EqualityExpression[@Image="=="][
    PrimaryExpression/PrimaryPrefix/Name[pmd-java:typeIs("java.util.Collection")]
    and PrimaryExpression/PrimaryPrefix/Literal/NullLiteral
  ] and PrimaryExpression/PrimaryPrefix/Name[@Image = concat(../../../EqualityExpression["=="]/PrimaryExpression/PrimaryPrefix/Name/@Image, ".isEmpty")]
]
]]>
         </value>
      </property>
   </properties>
</rule>

<rule name="Prefer_CollectionUtils.isNotEmpty"
      language="java"
      message="Use CollectionUtils.isNotEmpty()"
      class="net.sourceforge.pmd.lang.rule.XPathRule">
   <description>
	Use CollectionUtils.isNotEmpty()
   </description>
   <priority>5</priority>
   <properties>
      <property name="version" value="2.0"/>
      <property name="xpath">
         <value>
<![CDATA[
(//ConditionalAndExpression[
  EqualityExpression[@Image="!="][
    PrimaryExpression/PrimaryPrefix/Name[pmd-java:typeIs("java.util.Collection")]
    and PrimaryExpression/PrimaryPrefix/Literal/NullLiteral
  ] and (
      UnaryExpressionNotPlusMinus[@Image="!"]/PrimaryExpression[
        PrimaryPrefix/Name[@Image = concat(../../../../EqualityExpression/PrimaryExpression/PrimaryPrefix/Name/@Image, ".isEmpty")]
        and PrimarySuffix/Arguments
      ]
    ) or (
      EqualityExpression[@Image = "=="][
        PrimaryExpression[
          PrimaryPrefix/Name[@Image = concat(../../../../EqualityExpression[@Image="!="]/PrimaryExpression/PrimaryPrefix/Name/@Image, ".isEmpty")]
          and PrimarySuffix/Arguments
        ] and PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral[@True = false()]
      ]
    )
]
|
//UnaryExpressionNotPlusMinus[@Image="!"][
  PrimaryExpression/PrimaryPrefix/Expression/ConditionalOrExpression[
    EqualityExpression[@Image="=="][
      PrimaryExpression/PrimaryPrefix/Name[pmd-java:typeIs("java.util.Collection")]
      and PrimaryExpression/PrimaryPrefix/Literal/NullLiteral
    ] and PrimaryExpression/PrimaryPrefix/Name[@Image = concat(../../../EqualityExpression["=="]/PrimaryExpression/PrimaryPrefix/Name/@Image, ".isEmpty")]
  ] or PrimaryExpression [
    PrimaryPrefix/Name[@Image = "CollectionUtils.isEmpty"]
    and PrimarySuffix/Arguments//Name
  ]
]
|
//EqualityExpression[@Image="=="][
  PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral[@True = false()]
  and PrimaryExpression/PrimaryPrefix/Expression/ConditionalOrExpression[
    EqualityExpression[@Image="=="][
      PrimaryExpression/PrimaryPrefix/Name[pmd-java:typeIs("java.util.Collection")]
      and PrimaryExpression/PrimaryPrefix/Literal/NullLiteral
    ] and PrimaryExpression/PrimaryPrefix/Name[@Image = concat(../../../EqualityExpression["=="]/PrimaryExpression/PrimaryPrefix/Name/@Image, ".isEmpty")]
  ] or (
    PrimaryExpression/PrimaryPrefix/Name[@Image = "CollectionUtils.isEmpty"]
    and PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral[@True = false()]
  )
]
)
]]>
         </value>
      </property>
   </properties>
</rule>

<!-- ArrayUtils rules -->
<rule name="Prefer_ArrayUtils.isEmpty"
      language="java"
      message="Use org.apache.commons.lang3.ArrayUtils.isEmpty"
      class="net.sourceforge.pmd.lang.rule.XPathRule">
   <description>
      Instead of explicitly checking against null and the length
      of the array against 0, use ArrayUtils.isEmpty()
   </description>
   <priority>5</priority>
   <properties>
      <property name="version" value="2.0"/>
      <property name="xpath">
         <value>
<![CDATA[
//ConditionalOrExpression[
  EqualityExpression[@Image = "=="][
    PrimaryExpression/PrimaryPrefix/Literal/NullLiteral
    and PrimaryExpression/PrimaryPrefix/Name[
        (pmd-java:typeIsExactly("boolean[]")
        or pmd-java:typeIsExactly("byte[]")
        or pmd-java:typeIsExactly("char[]")
        or pmd-java:typeIsExactly("double[]")
        or pmd-java:typeIsExactly("float[]")
        or pmd-java:typeIsExactly("int[]")
        or pmd-java:typeIsExactly("java.lang.Object[]")
        or pmd-java:typeIsExactly("long[]")
        or pmd-java:typeIsExactly("short[]")
        ) and ../../../following-sibling::EqualityExpression[@Image= "=="][
          PrimaryExpression/PrimaryPrefix/Literal[@Image = "0"]
          and PrimaryExpression/PrimaryPrefix/Name[
            ends-with(@Image, ".length")
            and substring-before(@Image, ".length") = ../../../preceding-sibling::EqualityExpression//Name/@Image
          ]
        ]
    ]
  ]
]
]]>
         </value>
      </property>
   </properties>
</rule>

<rule name="Prefer_ArrayUtils.isNotEmpty"
      language="java"
      message="Use org.apache.commons.lang3.ArrayUtils.isNotEmpty"
      class="net.sourceforge.pmd.lang.rule.XPathRule">
   <description>
Use ArrayUtils.isNotEmpty()
   </description>
   <priority>5</priority>
   <properties>
      <property name="version" value="2.0"/>
      <property name="xpath">
         <value>
<![CDATA[
(//ConditionalAndExpression[
  EqualityExpression[@Image = "!="][
    PrimaryExpression/PrimaryPrefix/Name[(
      pmd-java:typeIsExactly("boolean[]")
      or pmd-java:typeIsExactly("byte[]")
      or pmd-java:typeIsExactly("char[]")
      or pmd-java:typeIsExactly("double[]")
      or pmd-java:typeIsExactly("float[]")
      or pmd-java:typeIsExactly("int[]")
      or pmd-java:typeIs("java.lang.Object[]")
      or pmd-java:typeIsExactly("long[]")
      or pmd-java:typeIsExactly("short[]")
    ) and ../../../following-sibling::EqualityExpression[@Image = "!="][
        PrimaryExpression/PrimaryPrefix/Literal[@Image = "0"]
        and PrimaryExpression/PrimaryPrefix/Name[
          ends-with(@Image, ".length")
          and substring-before(@Image, ".length") = ../../../preceding-sibling::EqualityExpression//Name/@Image
        ]
      ]
    ]
  ]
]
|
//UnaryExpressionNotPlusMinus[@Image = "!" and PrimaryExpression/PrimaryPrefix/Name[@Image = "ArrayUtils.isEmpty"]]
|
//EqualityExpression[@Image = "=="][
  PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral[@True = false()]
  and PrimaryExpression/PrimaryPrefix/Name[@Image = "ArrayUtils.isEmpty"]
]
)
]]>
         </value>
      </property>
   </properties>
</rule>

<rule name="Use_StringUtils.replaceEach"
      language="java"
      message="Instead of calling replace multiple times, use StringUtils.replaceEach"
      class="net.sourceforge.pmd.lang.rule.XPathRule">
   <description>
      Instead of calling replace multiple times, which needs to
      iterate through the whole String each time, use StringUtils.replaceEach
      which only needs to iterate it once.
   </description>
   <priority>3</priority>
   <properties>
      <property name="version" value="2.0"/>
      <property name="xpath">
         <value>
<![CDATA[
//PrimaryExpression[
  PrimarySuffix[
    @Image = "replace"
    and following-sibling::PrimarySuffix[1][count(Arguments/ArgumentList/*) = 2]
    and following-sibling::PrimarySuffix[2][
      @Image = "replace"
      and following-sibling::PrimarySuffix[1][count(Arguments/ArgumentList/*) = 2]
    ]
  ] or PrimaryPrefix[
    Name[ends-with(@Image, ".replace")]
    and following-sibling::PrimarySuffix[1][count(Arguments/ArgumentList/*) = 2]
    and following-sibling::PrimarySuffix[2][
      @Image = "replace"
      and following-sibling::PrimarySuffix[1][count(Arguments/ArgumentList/*) = 2]
    ]
  ]
]
]]>
         </value>
      </property>
   </properties>
</rule>

<rule name="Prefer_MapUtils.isEmpty"
      language="java"
      message="Use MapUtils.isEmpty"
      class="net.sourceforge.pmd.lang.rule.XPathRule">
   <description>
Use MapUtils.isEmpty
   </description>
   <priority>3</priority>
   <properties>
      <property name="version" value="2.0"/>
      <property name="xpath">
         <value>
<![CDATA[
//ConditionalOrExpression[
  EqualityExpression[@Image = "=="][
    PrimaryExpression/PrimaryPrefix/Name
    and PrimaryExpression/PrimaryPrefix/Literal/NullLiteral
    and (following-sibling::EqualityExpression[@Image = "=="][
      PrimaryExpression/PrimaryPrefix/Name[ends-with(@Image, ".size") and substring-before(@Image, ".size") = ../../../preceding-sibling::EqualityExpression/PrimaryExpression/PrimaryPrefix/Name/@Image]
      or PrimaryExpression//Name[
        ../following-sibling::PrimarySuffix[@Image = "size"]
        and @Image = ../../../preceding-sibling::EqualityExpression//Name[../../..[@Image = "=="]]/@Image
      ] and PrimaryExpression//Literal[@Image = "0"]
    ]) or (following-sibling::RelationalExpression[@Image = "<="][
      PrimaryExpression[1]/PrimaryPrefix/Name[
        ends-with(@Image, ".size") and substring-before(@Image, ".size") = ../../../preceding-sibling::EqualityExpression/PrimaryExpression/PrimaryPrefix/Name/@Image
        or ../following-sibling::PrimarySuffix[@Image = "size"] and @Image = ../../../preceding-sibling::EqualityExpression[@Image = "=="]/PrimaryExpression//Name/@Image
      ]
      and PrimaryExpression[2]/PrimaryPrefix/Literal[@Image = "0"]
    ]) or (following-sibling::PrimaryExpression/PrimaryPrefix/Name[
      ends-with(@Image, ".isEmpty") and substring-before(@Image, ".isEmpty") = ../../preceding-sibling::EqualityExpression[@Image = "=="]/PrimaryExpression//Name/@Image
      or ../following-sibling::PrimarySuffix[@Image = "isEmpty"] and @Image = ../../preceding-sibling::EqualityExpression[@Image = "=="]/PrimaryExpression//Name/@Image
    ])
  ]
]
]]>
         </value>
      </property>
   </properties>
</rule>
</ruleset>
